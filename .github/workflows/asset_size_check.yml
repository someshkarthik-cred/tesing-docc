name: Check File Size
on:
  pull_request:
    branches: ["main"]

jobs:
  check_file_size:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: List changed files
      id: list_changed_files
      run: |
        extension_str=$(python3 Scripts/asset_extension_helper_script.py extension_list)
        IFS=',' read -ra extension_list <<< "$extension_str"
        output_files=$(git diff --name-only origin/${{ github.base_ref }}...origin/${{ github.head_ref }} --diff-filter=ACM -- $(printf "*.%s\n" "${extension_list[@]}" | xargs))
        unset IFS
        echo "output_files<<EOF" >> $GITHUB_ENV
        echo "$output_files" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    - name: Check file size
      id: bulky_files
      run: |
        urlencode() {
          echo "$1" | sed 's/ /%20/g'
        }
        
        file_extension() {
          extension=`expr "$1" : '.*\.\(.*\)'`
          echo "$extension"
        }
        
        size_limit() {
          case $1 in
            m4a | mp3 | pdf | ttf | otf)
              echo 100
              ;;
            json )
              echo 250
              ;;
            * )
              echo "🚨 Unknown Format. please fix the script for any discrepency 🚨"
              exit 1
          esac
        }
        
        filtered_asset_files="${{ env.output_files }}"
        
        if [ -z "$filtered_asset_files" ]; then
          echo "No asset files to process"
          echo "There are no asset files found in this pr. ✅" >> file_table.md
          echo skipped_size_check=true >> $GITHUB_OUTPUT
          exit 0
        else
          echo skipped_file_check=false >> $GITHUB_OUTPUT
        fi
        
        echo "File | Size (KB) | extension | Status" > file_table.md
        echo "--- | --- | --- | ---" >> file_table.md
        has_encountered_error=false
        
        declare -a SUPPORTED_EXTENSIONS=("m4a" "mp3" "json" "pdf" "ttf" "otf")
        declare -r M4A=0
        declare -r MP3=1
        declare -r JSON=2
        declare -r PDF=3
        declare -r TTF=4
        declare -r OTF=5

        IFS=$'\n'
        while read -r file; do
          file_size=$(du -k "$file" | cut -f1)
          file_link="[$file](https://github.com/${{ github.repository }}/blob/${{ github.head_ref }}/$file)"
          encoded_url=$(urlencode $file_link)
          extension=$(file_extension $file)
          if grep -qw "$extension" <<<"${SUPPORTED_EXTENSIONS[*]}"; then
            expected_size_limit=$(size_limit $extension)
            echo "Size limit received from fuction $expected_size_limit"
            if [ "$file_size" -gt $expected_size_limit ]; then
              export has_encountered_error=true
              echo "$encoded_url | $file_size | $extension | FAILED ❌" >> file_table.md
            else
              echo "$encoded_url | $file_size | $extension | PASSED ✅" >> file_table.md
            fi
          else
            export has_encountered_error=true
            echo "$encoded_url | $file_size | $extension | UNSUPPORTED_FILE_FORMAT ❌" >> file_table.md
          fi
        done <<< "$filtered_asset_files"
        unset IFS
        echo "<!-- End of table -->" >> file_table.md
        
        echo "### Supported File Formats And Threshold" >> file_table.md
        file_format_table="
        File type | Format | Threshold
        --- | --- | ---
        Audio | \`${SUPPORTED_EXTENSIONS[$M4A]}\` , \`${SUPPORTED_EXTENSIONS[$MP3]}\` | 100KB
        Lottie | \`${SUPPORTED_EXTENSIONS[$JSON]}\` | 250KB
        Image | \`${SUPPORTED_EXTENSIONS[$PDF]}\` | 100KB
        Font | \`${SUPPORTED_EXTENSIONS[$TTF]}\`, \`${SUPPORTED_EXTENSIONS[$OTF]}\` | 100KB 
        "
        echo "$file_format_table" >> file_table.md
        echo "<!-- End of table -->" >> file_table.md
        
        echo check_status="$has_encountered_error" >> $GITHUB_OUTPUT
    - name: Comment on PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const comment = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.includes('Asset File Size Report'));
          const fs = require('fs');
          const contents = fs.readFileSync('file_table.md', 'utf8');
          if (!contents) {
            process.exit(0)
          } else {
            const message = `### Asset File Size Report\n\n${contents}`;
            if (comment) {
              github.rest.issues.updateComment({
                comment_id: comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message,
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }
          }
    - name: check file size status
      if: ${{ !steps.bulky_files.outputs.skipped_size_check }}
      run: |
        if [ ${{ steps.bulky_files.outputs.check_status }} = true ]; then
        echo "### 🚨 We have encoutered few asset size above thresshold. please compress them 🚨 ###"
        echo -e "::error::$(cat file_table.md)"
        exit 1;
        fi
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
